<?php

/**
*
* @author Carl McDade
* @copyright Copyright (c) 2010, Carl McDade
* @since 2010-02-19
* @version 0.2
* @license http://opensource.org/licenses/gpl-license.php GNU Public License
* @link http://www.drupal.se Drupal Sweden
*  
*/

/**
*
* Define some constants and globals that can be easily changed. Done here because there maybe multiple modules.
* taking care of different application sets. Start bootstrapping here.
*
* @todo create a more structured bootstrap file that can be used in other
* situations
*
*/


define('APP_MODULE', 'timetracker');
define('APP_PATH', drupal_get_path('module', APP_MODULE));
define('DOCROOT', drupal_get_path('module', APP_MODULE));
define('INI_FILENAME', drupal_get_path('module', APP_MODULE) . "/_configuration/tt.ini");



// frameworks
spl_autoload_register('_autoload');


/*
* These global variables are necessary to carry values to the Classes nested
* in the module functions.
*
* @todo Module_list and hook_list should come from a configuration data source
* loaded by a Singleton Class
*
*/


/**
* =================================== CONTROLLER ===============================
* @author Carl McDade
* @since 2010-02-14
* Start the contoller class using the autoloader function. The arguments are the Class name and method
* sent from the routing system. Controllers are contained in a function that sees Drupal and makes Drupal
* functions available to the Class.
*
* @todo Test the use of reflection API to aviod instantating the Class and to get more information on arguments
* needed for the method rather than forcing them to conform to the URI input.
*
* @return null
*/



function _autoload($class)
{    
	// get a list of class file names. Allow only these and not Drupal class files in array
	$class = strtolower($class);
	$check_admin = explode('_', $class);
	
	if(isset($check_admin[1]) && $check_admin[1] == 'admin')
	{
		//
		$path = DOCROOT . '/_controllers/'. $check_admin[0] . '/' . $check_admin[0] . '_' . $check_admin[1] . '.class.inc';
		if(file_exists($path))
		{
			require_once($path);
		}
	}
	else
	{
		//
		$extensions = array(".inc",".php",".class.inc",".class.php");
		foreach($extensions as $extension)
		{		
			$path = DOCROOT . '/_controllers/'. $class . '/' . $class . $extension;
			$path = str_replace("\\", "/", $path);
		
			if(file_exists($path))
			{
				require_once($path);
			}
		}
	}
	
    return;
}



function _controller()
{

	$class =  strtolower(arg(1));
    $action =  strtolower(arg(2));
    
    
    // internal admin url
    if(arg(1) == 'admin')
    {
    	$class = strtolower(arg(2)) . '_admin';
    	$action = strtolower(arg(3));
    }
    
    // drupal admin url   
    if(arg(0) == 'admin')
    {
    	$class = strtolower(arg(1)) . '_admin';
    	
    	// default to the index method of the class when a method is not found
    	if(arg(2) == '')
    	{
    		$action = 'index';
    	}
    	else
    	{
    		$action = strtolower(arg(2));
    	}
    }
    
    

    // URI items after the /controller/action are loaded into the function as parameters
    $arguments = func_get_args();
    
    // iterate the parameters but skip the first two as they are the controller and action
    //
    $args = implode(',' , $arguments);
    
    $controller = new $class();
    if(method_exists($controller, $action))
    {
    	return $controller->$action($args); // send string of arguments
    }
    else
    {
    	return drupal_not_found();
    }

}



/**
* ==================================== MODEL ===================================
* @author Carl McDade
* @since 2010-02-14
* Start the class loader function. The arguments are the Class name
*
* Add any database routines here and load the results into variables. Complicated
* solutions should be placed in a model file
*
* Add any business logic here and load the results to variables. Complicated
* solutions should be placed in a model file
*
*/


function _model( $model, $mode, $parameter = NULL )
{	
	$model_path = DOCROOT . '/_models' . '/' . $model . '.model.inc';
    if(include_once($model_path))
    {
    	//
    	$data = new $model;
    	if(method_exists($data,$mode))
    	{
    		//
    		return $data->$mode();
    	}
    	else
    	{
    		return 'The model was not was not processed.';
    	}
    }
    else
    {
    	return 'The model file was not found.';
    }
}


/**
* ===================================== VIEW ===================================
* @author Carl McDade
* @since 2010-02-14
* This is where the views are registered to Drupals system. Using the hook_theme
* function a template is choosen from the _view directory.Be careful not to use
* the same template twice ie. both as parent and child template in the timetracker_view().
* @TODO fix it so that duplicates cannot happen
*
*/


function _view($view, $variables = NULL, $output = NULL)
{

    $template_path = DOCROOT . '/_views' . '/' . $view . '.tpl.php';
    
    if (file_exists($template_path) == false)
    {
        trigger_error("Template {$view} not found in ". $template_path);
        return false;
    }

    if(is_array($variables))
    {

        // Load variables here because they become part of the module not the theme template.php file.
        foreach ($variables as $key => $value)
        {
        	// do not render a variable if it is an empty value
            
            	//
            	$$key = $value;
        	
        }

        // pre-load the tt child template output with variables
       $output .= _render_template($template_path, $variables);
    }

    // output everything into a parent template. Drupals theme system page is the default
   print theme('page',$output);

}

function _menu_links($menu, $separater = NULL, $template = NULL, $index = NULL)
{
    
     $list = array();
     $output ='';
    
     foreach($menu as $section => $group)
     {   
		 
			 $list[] =  l($group['text'],$group['path']);			 
		   
     }
    
     $output .= implode($separater, $list);    
     return $output;
}


/**
* @todo Update INI file methods to handle sections and add these to INI file
*
* the array of permission actually have to exists in the hook_perm fuction used by Drupal
* the reason I do this here is to enforce the ordered tt routing conventions 
* over the chaotic Drupal ones. MVC usage hints to where and what is being used in the code
* while Drupal allows anything to hide anywhere.
*
*/
	


// Do our own render function because D7 adds the DRUPAL_ROOT which we don't need
function _render_template($template_file, $variables)
{
  extract($variables, EXTR_SKIP); // Extract the variables to a local namespace
  ob_start(); // Start output buffering
  include $template_file; // Include the template file
  return ob_get_clean(); // End buffering and return its contents
}


/* ============================= Drupal hooks and functions =================================== */


function timetracker_init()
{
	/*
   		style sheets
    */
    	drupal_add_css(drupal_get_path('module', APP_MODULE ) . '/css/anytime.c.css');
    	drupal_add_css(drupal_get_path('module', APP_MODULE ) . '/css/default.css');
    	
    	drupal_add_js(drupal_get_path('module', APP_MODULE ) . '/js/jquery.form.js');
    	drupal_add_js(drupal_get_path('module', APP_MODULE ) . '/js/jquery.validate.js');
    	drupal_add_js(drupal_get_path('module', APP_MODULE ) . '/js/additional-methods.js');
        drupal_add_js(drupal_get_path('module', APP_MODULE ) . '/js/anytime.js');
    	drupal_add_js(drupal_get_path('module', APP_MODULE ) . '/js/mvc.js');
}

/**
*
* Call to the Drupal hook_menu
*
* Each call to a function from a path is exchanged through a single Class loader
* that loads the Class file and calls the Class methods. In most cases the called
* Class is a controller
*
* path and file arguments are not used here because we want to use a single dynamic
* file and class loader
*
* formatting only allows page activation under prefixed [app_trigger]/[controller]/[action]
*
* access is always open with the access callback set to true. Access control is
* left to timetracker_access().
* @return array
*
*/


function timetracker_perm() {
  return array(
    'use timetracker',
    'manage timetracker',
    'administer timetracker'
    );
}

function timetracker_menu()
{
 
    $items[ APP_MODULE . '/%/%' ] = array(
        'page callback' => '_controller',
        'page arguments' => array(1, 2),
        'access arguments' => array('use timetracker'),
        'type' => MENU_CALLBACK,

    );   
    
    // Need at least one child item before your section will appear.
	  $items['admin/'. APP_MODULE .''] = array(
		'title' => 'Timetracker administration',
		'description' => 'Settings for taxonomy and other configuration to be used in project listings',
		'page callback' => '_controller',
		'access arguments' => array('administer timetracker'),
	  );
	  
	// Need at least one child item before your section will appear.
	  $items['admin/'. APP_MODULE .'/reports'] = array(
		'title' => 'Timetracker reports',
		'description' => 'Settings for taxonomy and other configuration to be used in project listings',
		'page callback' => '_controller',
		'access arguments' => array('administer timetracker'),
		'type' => MENU_LOCAL_TASK,
	  );
	  
	// Need at least one child item before your section will appear.
	  $items['admin/'. APP_MODULE .'/settings'] = array(
		'title' => 'Timetracker settings',
		'description' => 'Settings for taxonomy and other configuration to be used in project listings',
		'page callback' => '_controller',
		'access arguments' => array('administer timetracker'),
	  ); 
	  
    return $items;

} 

/**
 * Implementation of hook_menu_default_menu_links().
 */
function timetracker_menu_default_menu_links() {
  $menu_links = array();

  // Exported menu link: features:time_sheet/%
  $menu_links['features:timetracker/timetracker/user%'] = array(
    'menu_name' => 'features',
    'link_path' => 'timetracker/timetracker/user',
    'router_path' => 'timetracker/timetracker/user',
    'link_title' => 'My time',
    'options' => array(
      'attributes' => array(
        'class' => 'mytime_link',
      ),
    ),
    'module' => 'system',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '0',
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Timetracker');


  return $menu_links;
}

/**
* implement Drupal hook_taxonomy_term_delete()
* using this hook to delete term information that is attached in the timetracker project table
* the table is used because terms do not have fields and we need to store more information
* to use terms as project containers
*/

function timetracker_taxonomy_term_delete($term)
{
	$voc = variable_get('timetracker_projects', NULL);
	
	// compare the term vid to the vid of the vocabulary chosen in the timetracker settings
	if($term->vid == $voc)
	{
		print $term->tid;
		$delete_project = db_query("DELETE FROM {timetracker_projects} WHERE project_id=%d", array($term->tid));
		$delete_term = db_query("DELETE FROM {taxonomy_term_data} WHERE tid=%d", array($term->tid));
		
			print t('Project "') . $term->name . t('" deleted.');
	}
}


function timetracker_mytime_()
{
			// get vocabulary as options list
			$voc = variable_get('timetracker_projects', NULL);
			$tree = taxonomy_get_tree($voc,0,NULL,true);
			
			
			foreach ($tree as $key => $term)
			{
				$terms[$term->tid] = $term->name;
			}
			
			if(!empty($terms))
			{
				$terms[0] = ''; 
				ksort($terms);
			}
			
			if($voc != NULL)
			{
			
			  $form['user_task'] = array(
				'#type' => 'textfield', 
				'#title' => t('Task'),
				'#prefix' => '<table id="task-table"><tr><td>',
			  );
			  
			  if(empty($terms))
			  {
			  
				 $terms = array(t('No projects'));
			  }
			  
			   $form['project_id'] = array(
					'#type' => 'select',
					'#title' => t('Projects'),
					'#options' => $terms,
					'#default_value' => $terms[0],
					//'#description' => l(t('Add project'),'timetracker/timetracker/project_add', array('attributes' => array('id' => 'add-project'))),
					'#prefix' => '',
					'#suffix' => ''
				  );
			  	  
			 $form['event_date'] = array(
				'#type' => 'textfield', 
				'#title' => t('Date'),
				'#size' => '10',
				'#prefix' => '',
				'#suffix' => ''
			  );	
			  
			  $form['hours_used'] = array(
				'#type' => 'textfield', 
				'#title' => t('Hours'),
				'#size' => '4',
			  );
			  
			  $form['submit'] = array(
				'#type' => 'submit', 
				'#value' => 'Save',
				'#prefix' => '<div class="form-item form-type-submit">',
				'#suffix' => '</div></td></tr></table>'
			  );		  
			  			
			  $form['#action'] = url('timetracker/timetracker/mytime');
			}
			else
			{
				$form['project_add_link'] = array(
					'#type' => 'markup', 
					'#value' => l(t('Set category'),'admin/timetracker/settings', array('attributes' => array('id' => 'add-missing-category'))),
				);
			}
			  
		return $form;
}

function timetracker_mytime_update_()
{
			// get vocabulary as options list
			$voc = variable_get('timetracker_projects', NULL);
			$tree = taxonomy_get_tree($voc,0,NULL,true);
			
			$terms = array(0 => ''); 
			foreach ($tree as $key => $term)
			{
				$terms[$term->tid] = $term->name;
			}
			
			if(!empty($terms))
			{
			
				ksort($terms);
			
			}
			
			  $form['user_task'] = array(
				'#type' => 'textfield', 
				'#title' => t('Task'),
				'#prefix' => '<table id="task-table"><tr><td>',
			  );
			  
			  $form['project_id'] = array(
				'#type' => 'select',
				'#title' => t('Projects'),
				'#options' => $terms,
				'#default_value' => $terms[0],
				'#description' => t('Choose a project. (optional)'),
				'#prefix' => '',
				'#suffix' => ''
			  );			
			  			  
			  $form['event_date'] = array(
				'#type' => 'textfield', 
				'#title' => t('Date'),
				'#size' => '10',
				'#prefix' => '',
				'#suffix' => ''
			  );	
			  
			  $form['hours_used'] = array(
				'#type' => 'textfield', 
				'#title' => t('Hours'),
				'#size' => '4',
			  );
			  
			  $form['submit'] = array(
				'#type' => 'submit', 
				'#value' => 'Save',
				'#prefix' => '<div class="form-item form-type-submit">',
				'#suffix' => '</div></td></tr></table>'
			  );		  
			  			
			  $form['#action'] = url('timetracker/timetracker/mytime_update');
			  
		return $form;
}


function timetracker_myreports_()
{
	global $user;		
	
	// get vocabulary as options list
	$voc = variable_get('timetracker_projects', NULL);
	$tree = taxonomy_get_tree($voc,0,NULL,true);
	$terms = array();
	
	
			
	foreach ($tree as $key => $term)
	{
		$terms[$term->tid] = $term->name;
		$tids[] = $term->tid;
	}
	
	if(!empty($terms))
	{
		ksort($terms);
	
	}
		
	$project = $tids[0];
	
	$result = db_query('SELECT * FROM {timetracker_project_events} e WHERE e.user_id = %d AND e.project_id = %d ORDER BY created DESC', array($user->uid, $project));
	  
    /* form with table display */
    
			  
    $form['start_date'] = array(
				'#type' => 'textfield', 
				'#title' => t('Start Date'),
				'#size' => '10',
				'#prefix' => '<table><tr><td>',
				'#suffix' => '</td>'
			  );
	
	$form['end_date'] = array(
				'#type' => 'textfield', 
				'#title' => t('End Date'),
				'#size' => '10',
				'#prefix' => '<td>',
				'#suffix' => '</td>'
			  );
    
    $form['my_projects_id'] = array(
				'#type' => 'select',
				'#title' => t('Projects'),
				'#options' => $terms,
				'#default_value' => $project,
				'#description' => t('Choose another project to show your accumulated time.'),
				'#prefix' => '<td>',
				'#suffix' => '</td>'
			  );
	
	$form['user_id'] = array(   
				'#type' => 'textfield',   
				'#autocomplete_path' => 'user/autocomplete' 
				'#prefix' => '<td class="no-label">',
				'#suffix' => '</td>'
				); 
			  
	$form['submit'] = array(
			  	 '#type' => 'submit', 
			  	 '#value' => t('Show report'),
			  	 '#submit' => array('Submit'),
			  	 '#prefix' => '<td class="no-label">',
				 '#suffix' => '</td>'
			  );
	
	$form['clear'] = array(
			  	 '#type' => 'markup', 
			  	 '#value' => '<input class="no-label clear" type="button" value="">',
			  	 '#prefix' => '<td>',
				 '#suffix' => '</td></tr></table>'
			  );
			  
	$form['#action'] = url('timetracker/timetracker/myreport');
			  
	$markup = '<div id="output"></div>'; 
				  
	$form['table'] = array(
				'#type' => 'markup', 
				'#value' => $markup,
			  );
			  
	return $form;
	
}

function timetracker_myreports_csv_()
{
	// Drupal still has a bug that creates type submit rather than button
			  $form['export'] = array(
				'#type' => 'item', 
				'#markup' => '<input type="button" class="form-submit" value="Export report" name="export" id="edit-export">',
			  );
			  
			  $form['my_report_id'] = array(
				'#type' => 'hidden',
				'#attributes' => array('id' => 'my-report-id')
			  );
			  
			  $form['#action'] = url('timetracker/timetracker/myreport_csv');
			  
	return $form;
}


function timetracker_updatetime_()
{
	//
	
}
	
function timetracker_settings_form_()
{
		$vids = db_query("SELECT vid, name  FROM {vocabulary}");
		while($voc = db_fetch_object($vids))
		{
			$projects[$voc->vid] = $voc->name;
		}
		
		$form['selected'] = array(
				'#type' => 'select',
				'#title' => t('Project Category'),
				'#options' => $projects,
				'#default_value' => variable_get('timetracker_projects', 0),
				'#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),
			  );
		
		$form['submit'] = array(
			'#type' => 'submit', 
			'#value' => 'Submit',
		);
		
		$form['#action'] = url('timetracker/admin/timetracker/settings_save');
		
		return $form;
    	
}


function timetracker_projects_add_()
{
	global $user;
	
	$args = func_get_args();
	
		
	// if we are on the edit page fill the values
	$pid = check_plain(arg(3));
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add a project'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,

		);
	
	if(isset($pid) && is_numeric($pid))
	{		
		$op = t('Update project');
		$project = db_fetch_array(db_query("SELECT * FROM {timetracker_projects} WHERE project_id=%d", array($pid)));
		$db_op = 'project_update';
		
		$project = (array)$project[0];
		
		$form['add']['project_id'] = array(
			'#type' => 'hidden', 
			'#value' => $pid,
		);
		
	}
	else
	{
		//
		$op = t('Add project');
		$db_op = $args[1];
	}
		
	$groups = array();
	
	// get the groups available
	$list = db_query("SELECT * FROM {timetracker_project_groups}");
	
	while($group = db_fetch_object($list))
	{
		$groups[$group->project_group_id] = $group->project_group_name;
	}
		
	
    $form['add']['project_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project name'),
		'#default_value' => isset($project['project_name']) ? $project['project_name'] : '',
	);
	
	if(!empty($groups))
	{
		
	$form['add']['project_group'] = array(
		'#type' => 'select',
		'#options' => $groups,
		'#default_value' => isset($project['project_group_id']) ? $project['project_group_id'] : '',
		'#title' => t('Project group'),
		'#description' => t('This will automatically add the prefix for the group. Example: choosing TTC will give "OP-"')
	);
	}
	else
	{
		//
		$form['add']['project_group'] = array(
			'#type' => 'markup', 
			'#value' => l(t('Add a project group'),'admin/timetracker/groups'),
		);
	}
	
	$form['add']['project_external_key'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project key'),
		'#default_value' => isset($project['project_external_key']) ? $project['project_external_key'] : '',
		'#description' => t('This is the suffix for the project code and must be unique. Example: if your project is named Admin then example: "ADM"')
	);
	
	$form['add']['project_desc'] = array(
		'#type' => 'textfield', 
		'#default_value' => isset($project['project_desc']) ? $project['project_desc'] : '',
		'#title' => t('Description'),
	);
	
	// get the available status
	$status = db_query("SELECT * FROM {timetracker_project_status}");
	while ($type = db_fetch_object($status))
	{
		$types[$type->id] = $type->status_name;
	}
	
	$form['add']['project_status'] = array(
		'#type' => 'select',
		'#options' => $types,
		'#title' => t('Project status'),
		'#default_value' => isset($project['status']) ? $project['status'] : '',
		'#description' => t('Projects are automatically open unless changed here.')
	);
			  
	$form['add']['submit'] = array(
		'#type' => 'submit', 
		'#value' => $op,
		'#submit' => array('Submit'),
	);
			  
	$form['#action'] = url($db_op);// admin class
			  			  
	return $form;
	
}

function timetracker_projects_category_add_()
{
	global $user;	
	
	// if we are on the edit page fill the values
	$pid = check_plain(arg(3));
	$op = t('Add project category');
	$db_op = 'project_category_save';
	
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add a category'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
		'#description' => t('Add a new category to the list of categories below.')

		);
	
    $form['add']['project_category_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project Category'),
		'#default_value' => '',
	);

	$form['add']['project_category_machine_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project Machine Name'),
		'#default_value' => '',
	);	
	
	$form['add']['project_category_description'] = array(
		'#type' => 'textfield', 
		'#default_value' => '',
		'#title' => t('Description'),
	);
			  
	$form['add']['submit'] = array(
		'#type' => 'submit', 
		'#value' => $op,
		'#submit' => array('Submit'),
	);
			  
	$form['#action'] = url('admin/timetracker/'. $db_op);// admin class			  
			  
	return $form;
	
}

function timetracker_projects_edit_()
{
	global $user;
	
	$args = func_get_args();
		
	// if we are on the edit page fill the values
	$pid = check_plain(arg(3));
	
	$project = db_fetch_array(db_query("SELECT td.tid, td.name, td.description, tt.project_external_key, tt.created, tt.project_hours, g.project_group_name, g.project_group_prefix, s.* FROM 
		{term_data} AS td 
		LEFT JOIN {timetracker_projects} AS tt ON td.tid = tt.project_id 
		LEFT JOIN {timetracker_project_groups} AS g ON g.project_group_id = tt.project_group_id 
		LEFT JOIN {timetracker_project_status} AS s ON tt.status = s.id WHERE td.tid =%d", array( $pid )));
	
	
	// get the groups available
	$list = db_query("SELECT * FROM {timetracker_project_groups}");
	while ($group = db_fetch_object($list))
	{
		$groups[$group->project_group_id] = $group->project_group_name;
	}
	
	// get the available status
	$status = db_query("SELECT * FROM {timetracker_project_status}");
	while ($type = db_fetch_object($status))
	{
		$types[$type->id] = $type->status_name;
	}
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('edit a project'),
		'#collapsed' => false,
		);
	
	$form['add']['project_id'] = array(
		'#type' => 'hidden', 
		'#default_value' => isset($project['tid']) ? $project['tid'] : '',
	);
	
    $form['add']['project_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project name'),
		'#default_value' => html_entity_decode($project['name']),
	);
	
	if(!empty($groups))
	{
		
	$form['add']['project_group'] = array(
		'#type' => 'select',
		'#options' => $groups,
		'#default_value' => isset($project['project_group_id']) ? $project['project_group_id'] : '',
		'#title' => t('Project group'),
		'#description' => t('This will automatically add the prefix for the group. Example: choosing TTC will give "OP-"')
	);
	}
	else
	{
		//
		$form['add']['project_group'] = array(
			'#type' => 'markup', 
			'#value' => l(t('Add a project group'),'admin/timetracker/groups'),
		);
	}
	
	$form['add']['project_external_key'] = array(
		'#type' => 'textfield', 
		'#title' => t('Project key'),
		'#default_value' => html_entity_decode($project['project_external_key']),
		'#description' => t('This is the suffix for the project code and must be unique. Example: if your project is named Admin then example: "ADM"')
	);
	
	$form['add']['project_desc'] = array(
		'#type' => 'textfield', 
		'#default_value' => html_entity_decode($project['description']),
		'#title' => t('Description'),
	);
	
	$form['add']['project_status'] = array(
		'#type' => 'select',
		'#options' => $types,
		'#title' => t('Project status'),
		'#default_value' => isset($project['status']) ? $project['status'] : '',
		'#description' => t('Projects are automatically open unless changed here.')
	);
			  
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Update project'),
		'#submit' => array('Submit'),
	);
	
	// use this form for other updates to the table redirect by action
	
	if(!empty($args[1]))
	{
		$action = $args[1];
	}
	else
	{
		$action = 'admin/timetracker/project_update';	
	}
		
			  
	$form['#action'] = url($action);// admin class
			  			  
	return $form;
	
}

function timetracker_groups_add_()
{
	global $user;	
	
	// if we are on the edit page fill the values
	$gid = check_plain(arg(3));
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add a group'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,

		);
	
	if(isset($gid) && is_numeric($gid))
	{		
		$op = t('Update group');
		$group = db_fetch_array(db_query("SELECT * FROM {timetracker_project_groups} WHERE group_id=%d",array($pid)));
		$db_op = 'group_update';
		
		$group = (array)$group[0];
		
		$form['add']['group_id'] = array(
			'#type' => 'hidden', 
			'#value' => $pid,
		);
		
	}
	else
	{
		//
		$op = t('Add a group');
		$db_op = 'group_save';
	}	
	
	$group = array();
		
    $form['add']['group_name'] = array(
		'#type' => 'textfield', 
		'#title' => t('Group name'),
		'#default_value' => isset($group['project_name']) ? $group['project_name'] : '',
	);	
	
	$form['add']['group_prefix'] = array(
		'#type' => 'textfield', 
		'#title' => t('Group prefix'),
		'#default_value' => isset($group['project_external_key']) ? $group['project_external_key'] : '',
		'#description' => t('This is the prefix for the project code and must be unique. Example: if your project is named Admin then example: "ADM"')
	);
	
	$form['add']['project_desc'] = array(
		'#type' => 'textfield', 
		'#default_value' => isset($group['project_desc']) ? $group['project_desc'] : '',
		'#title' => t('Description'),
	);
				  
	$form['add']['submit'] = array(
		'#type' => 'submit', 
		'#value' => $op,
		'#submit' => array('Submit'),
	);
			  
	$form['#action'] = url('admin/timetracker/'. $db_op);// admin class
			  			  
	return $form;
	
}

    
    	

?>
